#!/usr/bin/env ruby

require "active_support"
require "active_support/core_ext/numeric/bytes"
require "faraday/net_http_persistent"
require "logger"
require "opensearch/audit"
require "opensearch/cli"

logger = Logger.new($stdout)
logger.level = Logger::WARN

options = {
  list_checks: false,
  checks: [],
  logger: logger,
  periodic: false,
  min_shard_size: 10.gigabytes,
  max_shard_size: 50.gigabytes
}

def parse_bytes(s)
  s.upcase =~ /\A(\d+)([KMGTPEZ])?B?\z/
  m = {
    nil => 1,
    "K" => 1.kilobyte,
    "M" => 1.megabyte,
    "G" => 1.gigabyte,
    "T" => 1.terabyte,
    "P" => 1.petabyte,
    "E" => 1.exabyte,
    "Z" => 1.zettabyte
  }
  Integer(Regexp.last_match(1)) * m[Regexp.last_match(2)]
rescue
  raise StandardError, "invalid byte size: #{s.inspect}"
end

cli = OpenSearch::CLI.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options] [indices]"

  opts.on("--list-checks", "List available checks") do
    options[:list_checks] = true
  end

  opts.on("--checks=CHECKS", Array, "Only run the specified checks") do |checks|
    options[:checks] = checks.map(&:to_sym)

    extra_checks = options[:checks] - OpenSearch::Audit.available_checks
    unless extra_checks.empty?
      raise "Unknown checks: #{extra_checks.map(&:to_s).join(", ")}"
    end
  end

  opts.separator ""
  opts.separator "Indices scope options:"

  opts.on("--[no-]periodic", "Only consider periodic indices") do |periodic|
    options[:periodic] = periodic
  end

  opts.separator ""
  opts.separator "Logging options:"

  opts.on("--log-level=LEVEL", [:debug, :info, :warn, :error, :fatal], "Set the log level for the output") do |level|
    options[:logger].level = level
  end

  opts.separator ""
  opts.separator "Shard size options:"

  opts.on("-p", "--profile=PROFILE", [:read, :write], "Select a workload profile (read, write)") do |profile|
    if profile == :read
      options[:min_shard_size] = 10.gigabytes
      options[:max_shard_size] = 30.gigabytes
    elsif profile == :write
      options[:min_shard_size] = 30.gigabytes
      options[:max_shard_size] = 50.gigabytes
    end
  end

  opts.on("--min-shard-size=SIZE", "Set the minimum size of shards") do |size|
    options[:min_shard_size] = parse_bytes(size)
  end

  opts.on("--max-shard-size=SIZE", "Set the maximum size of shards") do |size|
    options[:max_shard_size] = parse_bytes(size)
  end
end

cli.load
cli.parse!

if options[:list_checks]
  pp OpenSearch::Audit.available_checks
  exit 0
end

if options[:max_shard_size] < options[:min_shard_size]
  logger.fatal("Maximum shard size (#{options[:max_shard_size]}) is less than minimum shard size (#{options[:min_shard_size]})")
  exit 1
end

index_pattern = ARGV.first || "_all"

index_list = OpenSearch::Audit::IndexList.new(client: cli.client, options: options, index_pattern: index_pattern)

puts "Found index groups:"
index_list.group_names.each do |group_name|
  group_indices = index_list.where(group_name: group_name)

  trends = [14, 7].map do |n|
    next unless group_indices.count > 2 * n

    format("%<trend>9s (last %<n>d)",
      trend: ActiveSupport::NumberHelper.number_to_human_size(group_indices.median_shard_size_trend(n)),
      n: n)
  end.compact.join(", ")
  trends = "n/a" if trends.empty?
  puts format("%<count>4d x %<name>-#{index_list.longest_index_name}s %<median_primary_size>9s [primary shards: %<primary_shard_count>2d, min: %<min>9s max: %<max>9s, med: %<med>9s, trends: %<trends>s]\n",
    count: group_indices.count,
    name: group_name,
    median_primary_size: ActiveSupport::NumberHelper.number_to_human_size(group_indices.median_primary_size),
    primary_shard_count: group_indices.median_primary_shard_count,
    min: ActiveSupport::NumberHelper.number_to_human_size(group_indices.min_shard_size),
    max: ActiveSupport::NumberHelper.number_to_human_size(group_indices.max_shard_size),
    med: ActiveSupport::NumberHelper.number_to_human_size(group_indices.median_shard_size),
    trends: trends)
end

mappings = cli.client.indices.get_mapping(index: index_pattern)
mappings.each do |index, mapping|
  index_list.enrich(index, :mapping, mapping)
end

OpenSearch::Audit.run_enabled_checks(index_list, options)
